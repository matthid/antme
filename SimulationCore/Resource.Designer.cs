//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.1
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AntMe {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resource() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AntMe.Resource", typeof(Resource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Standard ähnelt.
        /// </summary>
        internal static string SettingsDefaultName {
            get {
                return ResourceManager.GetString("SettingsDefaultName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Attempt to cheat with a fake Framework assembly. ähnelt.
        /// </summary>
        internal static string SimulationCoreAnalysisCheatWithFxFake {
            get {
                return ResourceManager.GetString("SimulationCoreAnalysisCheatWithFxFake", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die External reference: ähnelt.
        /// </summary>
        internal static string SimulationCoreAnalysisForeignRefInfotext {
            get {
                return ResourceManager.GetString("SimulationCoreAnalysisForeignRefInfotext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This ant was likely created with a newer version of AntMe!. ähnelt.
        /// </summary>
        internal static string SimulationCoreAnalysisNewerVersion {
            get {
                return ResourceManager.GetString("SimulationCoreAnalysisNewerVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The file does not contain a class with this name. ähnelt.
        /// </summary>
        internal static string SimulationCoreAnalysisNoClassFound {
            get {
                return ResourceManager.GetString("SimulationCoreAnalysisNoClassFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The ant class that was found ({0}) is not decorated with a PlayerAttribute. ähnelt.
        /// </summary>
        internal static string SimulationCoreAnalysisNoPlayerAttribute {
            get {
                return ResourceManager.GetString("SimulationCoreAnalysisNoPlayerAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ants of version 1.1 or lower are not supported in this version anymore. ähnelt.
        /// </summary>
        internal static string SimulationCoreAnalysisNotSupportedAntVersion {
            get {
                return ResourceManager.GetString("SimulationCoreAnalysisNotSupportedAntVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Attempting to load an earlier ant simulation core (version: {0}) failed. ähnelt.
        /// </summary>
        internal static string SimulationCoreAnalysisOldAssemblyLoadFailed {
            get {
                return ResourceManager.GetString("SimulationCoreAnalysisOldAssemblyLoadFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The ant class {0} containas more than one PlayerAttribute. ähnelt.
        /// </summary>
        internal static string SimulationCoreAnalysisTooManyPlayerAttributes {
            get {
                return ResourceManager.GetString("SimulationCoreAnalysisTooManyPlayerAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The external reference &apos;{0}&apos; could not be loaded. ähnelt.
        /// </summary>
        internal static string SimulationCoreAnalysisUnknownReferenceLoadFailed {
            get {
                return ResourceManager.GetString("SimulationCoreAnalysisUnknownReferenceLoadFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The ant could not be assigned a version. {0} ähnelt.
        /// </summary>
        internal static string SimulationCoreAnalysisUnknownVersion {
            get {
                return ResourceManager.GetString("SimulationCoreAnalysisUnknownVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The attack-modificator of caste {0} of ant {1} is invalid. ähnelt.
        /// </summary>
        internal static string SimulationCoreCasteRuleAttackFailed {
            get {
                return ResourceManager.GetString("SimulationCoreCasteRuleAttackFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The energy-modificator of caste {0} of ant {1} is invalid. ähnelt.
        /// </summary>
        internal static string SimulationCoreCasteRuleEnergyFailed {
            get {
                return ResourceManager.GetString("SimulationCoreCasteRuleEnergyFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The load-modificator of caste {0} of ant {1} is invalid. ähnelt.
        /// </summary>
        internal static string SimulationCoreCasteRuleLoadFailed {
            get {
                return ResourceManager.GetString("SimulationCoreCasteRuleLoadFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The caste-attribute of ant {0} does not contain a name. ähnelt.
        /// </summary>
        internal static string SimulationCoreCasteRuleNoName {
            get {
                return ResourceManager.GetString("SimulationCoreCasteRuleNoName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The reach-modificator of caste {0} of ant {1} is invalid. ähnelt.
        /// </summary>
        internal static string SimulationCoreCasteRuleRangeFailed {
            get {
                return ResourceManager.GetString("SimulationCoreCasteRuleRangeFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The rotationspeed-modificator of caste {0} of ant {1}is invalid. ähnelt.
        /// </summary>
        internal static string SimulationCoreCasteRuleRotationSpeedFailed {
            get {
                return ResourceManager.GetString("SimulationCoreCasteRuleRotationSpeedFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The speed-modificator of caste {0} of ant {1} is invalid. ähnelt.
        /// </summary>
        internal static string SimulationCoreCasteRuleSpeedFailed {
            get {
                return ResourceManager.GetString("SimulationCoreCasteRuleSpeedFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The sum of modificators of caste {0} of player {1} are invalid. ähnelt.
        /// </summary>
        internal static string SimulationCoreCasteRuleSumFailed {
            get {
                return ResourceManager.GetString("SimulationCoreCasteRuleSumFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The viewrange-modificator of caste {0} of ant {1} is invalid. ähnelt.
        /// </summary>
        internal static string SimulationCoreCasteRuleViewRangeFailed {
            get {
                return ResourceManager.GetString("SimulationCoreCasteRuleViewRangeFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The desired caste for the new ant &apos;{0}&apos; doesn&apos;t exist. ähnelt.
        /// </summary>
        internal static string SimulationCoreChooseWrongCaste {
            get {
                return ResourceManager.GetString("SimulationCoreChooseWrongCaste", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The loop count cannot be greater than {0}. ähnelt.
        /// </summary>
        internal static string SimulationCoreConfigurationLoopCountTooBig {
            get {
                return ResourceManager.GetString("SimulationCoreConfigurationLoopCountTooBig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The minimum loop count is 1. ähnelt.
        /// </summary>
        internal static string SimulationCoreConfigurationLoopCountTooSmall {
            get {
                return ResourceManager.GetString("SimulationCoreConfigurationLoopCountTooSmall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The timeout value for a loop cannot be less than 1. ähnelt.
        /// </summary>
        internal static string SimulationCoreConfigurationLoopTimeoutTooSmall {
            get {
                return ResourceManager.GetString("SimulationCoreConfigurationLoopTimeoutTooSmall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die At least one team must be selected for the simulation. ähnelt.
        /// </summary>
        internal static string SimulationCoreConfigurationNoTeams {
            get {
                return ResourceManager.GetString("SimulationCoreConfigurationNoTeams", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The round count must not exceed {0}. ähnelt.
        /// </summary>
        internal static string SimulationCoreConfigurationRoundCountTooBig {
            get {
                return ResourceManager.GetString("SimulationCoreConfigurationRoundCountTooBig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The minimum round count is 1. ähnelt.
        /// </summary>
        internal static string SimulationCoreConfigurationRoundCountTooSmall {
            get {
                return ResourceManager.GetString("SimulationCoreConfigurationRoundCountTooSmall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The timeout value for a round cannot be less than 1. ähnelt.
        /// </summary>
        internal static string SimulationCoreConfigurationRoundTimeoutTooSmall {
            get {
                return ResourceManager.GetString("SimulationCoreConfigurationRoundTimeoutTooSmall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The parameter configuration must not be null. ähnelt.
        /// </summary>
        internal static string SimulationCoreFactoryConfigIsNull {
            get {
                return ResourceManager.GetString("SimulationCoreFactoryConfigIsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The environment has not yet been initialized. ähnelt.
        /// </summary>
        internal static string SimulationCoreHostEnvironmentNotInit {
            get {
                return ResourceManager.GetString("SimulationCoreHostEnvironmentNotInit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The timeout for a round has been exceeded. ähnelt.
        /// </summary>
        internal static string SimulationCoreHostRoundTimeout {
            get {
                return ResourceManager.GetString("SimulationCoreHostRoundTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The configuration may only contain PlayerInfoFileName or PlayerInfoFileDump. ähnelt.
        /// </summary>
        internal static string SimulationCoreHostWrongPlayerInfo {
            get {
                return ResourceManager.GetString("SimulationCoreHostWrongPlayerInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die It&apos;s not possible to create marker with size smaller than 0 ähnelt.
        /// </summary>
        internal static string SimulationCoreNegativeMarkerSize {
            get {
                return ResourceManager.GetString("SimulationCoreNegativeMarkerSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The PlayerAttribute of class {0} does not contain a name. ähnelt.
        /// </summary>
        internal static string SimulationCorePlayerRuleNoName {
            get {
                return ResourceManager.GetString("SimulationCorePlayerRuleNoName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The simulation has already been unloaded. ähnelt.
        /// </summary>
        internal static string SimulationCoreProxyUnloaded {
            get {
                return ResourceManager.GetString("SimulationCoreProxyUnloaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The configuration may only contain PlayerInfoFileName or PlayerInfoFileDump. ähnelt.
        /// </summary>
        internal static string SimulationCoreProxyWrongPlayerInfo {
            get {
                return ResourceManager.GetString("SimulationCoreProxyWrongPlayerInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die There are no rights to grand database-access to various colonies. ähnelt.
        /// </summary>
        internal static string SimulationCoreRightsConflictDb {
            get {
                return ResourceManager.GetString("SimulationCoreRightsConflictDb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die There are no rights to grand file-access to various colonies. ähnelt.
        /// </summary>
        internal static string SimulationCoreRightsConflictIo {
            get {
                return ResourceManager.GetString("SimulationCoreRightsConflictIo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die There are no rights to grand network-access to various colonies. ähnelt.
        /// </summary>
        internal static string SimulationCoreRightsConflictNet {
            get {
                return ResourceManager.GetString("SimulationCoreRightsConflictNet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die There are no rights to grand userinterface-access to various colonies. ähnelt.
        /// </summary>
        internal static string SimulationCoreRightsConflictUi {
            get {
                return ResourceManager.GetString("SimulationCoreRightsConflictUi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The index of the caste column is too large. ähnelt.
        /// </summary>
        internal static string SimulationCoreSettingsCasteColumnToBig {
            get {
                return ResourceManager.GetString("SimulationCoreSettingsCasteColumnToBig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The index of the caste column is too small. ähnelt.
        /// </summary>
        internal static string SimulationCoreSettingsCasteColumnToSmall {
            get {
                return ResourceManager.GetString("SimulationCoreSettingsCasteColumnToSmall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cannot call Step() on a simulation that has already completed. ähnelt.
        /// </summary>
        internal static string SimulationCoreSimulatorRestartFailed {
            get {
                return ResourceManager.GetString("SimulationCoreSimulatorRestartFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The list of players of a team may not be empty. ähnelt.
        /// </summary>
        internal static string SimulationCoreTeamInfoNoName {
            get {
                return ResourceManager.GetString("SimulationCoreTeamInfoNoName", resourceCulture);
            }
        }
    }
}
